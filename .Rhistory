sessionInfo()
library(scran)
sessionInfo()
packageVersion("BiocManager")
install.packages("scuttle")
BiocManager::available()
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/packages/scuttle/")
find.package("dplyr")
getwd()
library("scuttle")
library("scuttle")
install.packages(c("codetools", "KernSmooth", "nlme", "RcppArmadillo"))
sessionInfo(9)
sessionInfo()
library(scran)
install.packages("scuttle")
install.packages("scuttle")
library(scuttle)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("scuttle")
BiocManager::install("scuttle")
.libPaths()
library(scuttle)
library(scuttle)
install.packages("RcppArmadillo")
source(https://bioconductor.org/packages/scuttle.R/)
BiocManager::install("scuttle", dependencies-TRUE)
BiocManager::install("scuttle", dependencies=TRUE)
BiocManager::install()
BiocManager::install(version = "3.12")
BiocManager::install("scuttle")
library(scuttle)
library(scran)
library(scuttle)
BiocManager::install("‘beachmat")
BiocManager::install("beachmat")
colBlockApply
BiocManager::install("beachmat")
library(scuttle)
library(scuttle)
browseVignettes("scuttle")
utils::globalVariables("colBlockApply")
library(scuttle)
colBlockApply
scuttle
scran
help(scran)
packageVersion("scran")
packageVersion("scuttle")
logNormCount(9)
logNormCount()
logNormCounts()
sce <- GrunPancreasData()
library(scran)
sce <- GrunPancreasData()
library(scRNAseq)
perCellQCMetrics()
packageVersion("scRNAseq")
packageVersion("tidyverse")
library(dplyr)
library(scRNAseq)
library(scuttle)
library(scRNAseq)
BiocManager::install("scRNAseq")
install.packages("scRNAseq")
library(scRNAseq)
packageVersion("BiocGenerics")
.libPaths("BiocGenerics")
.libPaths("scRNAseq")
.libPaths("scRNAseq") %>% print()
.libPaths("BiocGenerics") %>% print()
library(scran)
library(scuttle)
library(scRNAseq)
library(edgeR)
BiocManager::install()
BiocManager::install()
BiocManager::install()
#Single cell experiment object
WTMainData =  raw_count_data %>%
filter(Genotype_Group == "WT(ho)") %>%
filter(Condition == "YPD")
library(tidyverse)
#import scuttle
list.files(file.path(getwd(),'scuttle/R')) %>%
sapply(function(file){source(file.path(getwd(),'scuttle/R', file))})
logNormCount
logNormcounts()
logNormCounts()
logNormCounts(1)
raw_count_data <- read.table("../elife-51254-code1/data/103118_SS_Data.tsv", header=T, sep="\t")
#pre-processed data (Doublets and low-count cells have already been removed )
processed_count_data = ead.table("../elife-51254-code2.tsv", header=T, sep="\t")
#pre-processed data (Doublets and low-count cells have already been removed )
processed_count_data = read.table("../elife-51254-code2.tsv", header=T, sep="\t")
processed_count_data[1:5, 1:5]
raw_count_data[1:5, 1:5]
processed_count_data %>% rowSuma()
processed_count_data %>% rowSums()
processed_count_data$Condition
delSTP1Count = processed_count_data %>%
filter(Genotype_Group == "stp1") %>%
filter(Condition == "YPD") %>%
select(-KANMX, -NATMX, -Genotype, -Genotype_Group, -Replicate, -Condition, -tenXBarcode)
WTCount = processed_count_data %>%
filter(Genotype_Group == "WT(ho)") %>%
filter(Condition == "YPD") %>%
select(-KANMX, -NATMX, -Genotype, -Genotype_Group, -Replicate, -Condition, -tenXBarcode)
Sceobj = build_sceObj_from_readcount(WTCount, delSTP1Count, "WT(ho)", "stp1")
library(scDD)
build_sceObj_from_readcount <- function(geno1data, geno2data, geno1, geno2){
n1 = nrow(geno1data)
n2 = nrow(geno2data)
condition <- c(rep(1,n1), rep(2, n2)) %>%
as.matrix() %>% t() %>% as.data.frame() %>%
data.table::setnames(c( paste(geno1, c(1:n1), sep=""), paste(geno2, c(1:n2), sep=""))) %>%
t()
wt_targ_counts = cbind(t(geno1data), t(geno2data))
wt_targ_sce <- SingleCellExperiment(assays=list(counts=wt_targ_counts), colData=data.frame(condition))
return(wt_targ_sce)
}
detect_DD_from_normsceObj <- function(norm_sce){
prior_param=list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)
scDatExSim <- scDD(norm_sce, prior_param=prior_param, testZeroes=TRUE)
return(scDatExSim)
}
Sceobj = build_sceObj_from_readcount(WTCount, delSTP1Count, "WT(ho)", "stp1")
library(scran)
delSTP1Count = processed_count_data %>%
filter(Genotype_Group == "stp1") %>%
filter(Condition == "YPD") %>%
select(-KANMX, -NATMX, -Genotype, -Genotype_Group, -Replicate, -Condition, -tenXBarcode)
Sceobj = build_sceObj_from_readcount(WTCount, delSTP1Count, "WT(ho)", "stp1")
NormSceobj =  Sceobj %>% preprocess(zero.thresh=0.6, scran_norm=TRUE)
SceDD = detect_DD_from_normsceObj(NormSceobj)
WTMainData =  processed_count_data %>%
filter(Genotype_Group == "WT(ho)") %>%
filter(Condition == "YPD")
STP1MainData = processed_count_data %>%
filter(Genotype_Group == "stp1") %>%
filter(Condition == "YPD")
STP1Count = STP1MainData %>%
select(-KANMX, -NATMX, -Genotype, -Genotype_Group, -Replicate, -Condition, -tenXBarcode)
PARTITION.C1 <- results(SceDD, type="Zhat.c1")
PARTITION.C2 <- results(SceDD, type="Zhat.c2")
sideViolin(normcounts(SceDD)[i,], SceDD$condition,
MAP = list(PARTITION.C1[i,], PARTITION.C2[i,]),
title.gene=results(SceDD)$DDcategory[i])
i=39
sideViolin(normcounts(SceDD)[i,], SceDD$condition,
MAP = list(PARTITION.C1[i,], PARTITION.C2[i,]),
title.gene=results(SceDD)$DDcategory[i])
normcounts(SceDD)
normcounts(SceDD)[1:5, 1:5]
results(SceDD)
results(SceDD)[1:5, 1:4]
results(SceDD)$DDcategory
#Create SingleCellExperiment object
WTCountRep =  WTMainData %>%
select(Replicate) %>%
nth(1) %>% sapply(function(x){
if(x == "A1"){return(1)}
if(x == "B1"){return(2)}
if(x == "C1"){return(3)}
if(x == "D1"){return(4)}
if(x == "E1"){return(5)}
if(x == "F1"){return(6)}
})
WTMainData$Replicate %>% unique()
#Create SingleCellExperiment object
Batch = c(1:6) %>% set_names(unique(WTMainData$Replicate))
Batch
#Create SingleCellExperiment object
WTBatch = c(1:6) %>% set_names(unique(WTMainData$Replicate))
WTBatch[(D1)]
WTBatch['D1']
WTCountRep =  WTMainData %>%
select(Replicate) %>%
nth(1) %>% sapply(function(x){
return(WTBatch[x])
})
WTCountRep
WTCountRep %>% class()
STP1Batch = c(1:6) %>% set_names(unique(STP1MainData$Replicate))
STP1Batch
STP1CountRep = STP1MainData %>%
select(Replicate) %>%
nth(1) %>% sapply(function(x){
return(STP1Batch[x])
})
STP1CountRep
WT_SCE <- SingleCellExperiment(assays = list(counts = WTCountFilt),
colData = data.frame(BatchInfo = WTCountRep, condition))
WT_SCE <- SingleCellExperiment(assays = list(counts = WTCount),
colData = data.frame(BatchInfo = WTCountRep, condition))
WT_SCE <- SingleCellExperiment(assays = list(counts = WTCount),
colData = data.frame(BatchInfo = WTCountRep))
build_sceObj_from_readcount <- function(geno1data, geno2data, geno1, geno2){
n1 = ncol(geno1data)
n2 = ncol(geno2data)
condition <- c(rep(1,n1), rep(2, n2)) %>%
as.matrix() %>% t() %>% as.data.frame() %>%
data.table::setnames(c( paste(geno1, c(1:n1), sep=""), paste(geno2, c(1:n2), sep=""))) %>%
t()
wt_targ_counts = cbind(geno1data, geno2data)
wt_targ_sce <- SingleCellExperiment(assays=list(counts=wt_targ_counts), colData=data.frame(condition))
return(wt_targ_sce)
}
WTCount = WTMainData %>%
select(-KANMX, -NATMX, -Genotype, -Genotype_Group, -Replicate, -Condition, -tenXBarcode) %>%
t()
STP1Count = STP1MainData %>%
select(-KANMX, -NATMX, -Genotype, -Genotype_Group, -Replicate, -Condition, -tenXBarcode) %>%
t()
Sceobj = build_sceObj_from_readcount(WTCount, STP1Count, "WT(ho)", "stp1")
NormSceobj =  Sceobj %>% preprocess(zero.thresh=0.6, scran_norm=TRUE)
SceDD = detect_DD_from_normsceObj(NormSceobj)
counts(Sceobj)
counts(Sceobj)[1:5, 1:5]
WTCount[1:5, 1:5
]
raw_count_data[1:5, 1:5]
WT_SCE <- SingleCellExperiment(assays = list(counts = WTCount),
colData = data.frame(BatchInfo = WTCountRep))
delSTP1_SCE <- SingleCellExperiment(assays = list(counts = delSTP1Count),
colData = data.frame(BatchInfo = delSTP1CountRep))
delSTP1_SCE <- SingleCellExperiment(assays = list(counts = STP1Count),
colData = data.frame(BatchInfo = STP1CountRep))
#Create BASiCS_Chain object
WT_Regression <- BASiCS_MCMC(Data = WT_SCE, N = 1000,
Thin = 10, Burn = 500,
Regression = TRUE ,
PrintProgress = FALSE,
WithSpikes = FALSE)
library(BASiCS)
#Create BASiCS_Chain object
WT_Regression <- BASiCS_MCMC(Data = WT_SCE, N = 1000,
Thin = 10, Burn = 500,
Regression = TRUE ,
PrintProgress = FALSE,
WithSpikes = FALSE)
WTCount[1:5, 1:5]
WTCount[1:5, 1:5]
rowSums(WTCount)
WTCount[rowSums(WTCount) == 0]
colnames(WTCount[rowSums(WTCount) == 0,])
rownames(WTCount[rowSums(WTCount) == 0,])
zero_gene = union(rownames(WTCount[rowSums(WTCount) == 0,]), rownames(STP1CountRep[rowSums(STP1CountRep) == 0,]))
rownames(WTCount[rowSums(WTCount) == 0,])
zero_gene = union(rownames(WTCount[rowSums(WTCount) == 0,]), rownames(STP1Count[rowSums(STP1Count) == 0,]))
zero_gene
zero_gene %>% length()
WTCount[-WTCount,]
WTCountFilt = WTCount[-WTCount,]
WTCountFilt = WTCount[-zero_gene,]
WTCountFilt = WTCount[,-zero_gene]
zero_gene %>% class()
zero_gene
WTCountFilt = WTCount['YHR056W.A',]
WTCountFilt
WTCountFilt = WTCount[zero_gene,]
WTCountFilt = WTCount[-zero_gene,]
WTCountFilt = WTCount %>% filter(!is.element(rownames(WTCount), zero_gene))
WTCountFilt = WTCount[!is.element(rownames(WTCount), zero_gene),]
WTCountFilt
WTCountFilt %>% dim()
zero_gene %>% length()
WTCount %>% dim()
WT_SCE <- SingleCellExperiment(assays = list(counts = WTCountFilt),
colData = data.frame(BatchInfo = WTCountRep))
STP1CountFilt = STP1Count[!is.element(rownames(STP1Count), zero_gene),]
STP1_SCE <- SingleCellExperiment(assays = list(counts = STP1CountFilt),
colData = data.frame(BatchInfo = STP1CountRep))
#Create BASiCS_Chain object
WT_Regression <- BASiCS_MCMC(Data = WT_SCE, N = 1000,
Thin = 10, Burn = 500,
Regression = TRUE ,
PrintProgress = FALSE,
WithSpikes = FALSE)
BASiCS_VarianceDecomp(WT_Regression)
WT_Regression
runif(1:100)
runif(1:100) %>% plot(c(1:100),.)
runif(1:100) %>% plot(c(1:100),.,type="l")
runif(1:100) %>% plot(c(1:100),.,type="l", col="red")
runif(1:100) %>% plot(c(1:100),.,type="l", col="#7F0001")
runif(1:100) %>% plot(c(1:100),.,type="l", col="#316790")
runif(1:100) %>% plot(c(1:100),.,type="l", col="##4B4560
")
runif(1:100) %>% plot(c(1:100),.,type="l", col="#4B4560")
runif(1:100) %>% hist(type="l", col="#4B4560")
runif(1:100) %>% hist(type="l", col="#7F0001")
rnorm(100) %>% hist(type="l", col="#7F0001")
rnorm(0,3) %>% hist(type="l", col="#7F0001")
rnorm(100,0,3) %>% hist(type="l", col="#7F0001")
rnorm(100,0,3) %>% hist(col="#7F0001")
curve(sin(x^2)*exp(-x^2),-pi,pi)
curve(c(1:100))
pi
-pi
curve(dnorm(x,0,1),0,100)
curve(dnorm(x,0,1),-3,3)
curve(dnorm(x,0,1),-3,3, color="#7F0001")
curve(dnorm(x,0,1),-3,3, col="#7F0001")
curve(dnorm(x,0,1),-3,3, col="#7F0001", lwd=4)
curve(dnorm(x,0,5),-3,3, col="#316790", lwd=4)
curve(dnorm(x,0,5),-5,5, col="#316790", lwd=4)
curve(dnorm(x,0,3),-5,5, col="#316790", lwd=4)
curve(dnorm(x,0,3),-6,6, col="#316790", lwd=4)
curve(dnorm(x,0,3),-8,8, col="#316790", lwd=4)
var(c(1,1,1))
CV(c(1,1,1))
sd(c(1,1,1))
sd(c(1,1,1))/mean(c(1,1,1))
curve(dnorm(x,50,10),0,100)
dnorm(x,50,10)
curve(sin(x),-5,5,col=”blue”)
curve(sin(x),-5,5,col=”blue”)
x = c(1:100)
curve(sin(x),-5,5,col=”blue”)
plot(sin(x), c(1:100))
plot(sin(x), c(1:100), type="l")
plot(c(1:100),sin(x),type="l")
plot(c(1:10),sin(x),type="l")
plot(c(1:10),sin(c(1:10)),type="l")
plot(x(1:100), runif(100))
plot(xc1:100), runif(100))
plot(c(1:100), runif(100))
plot(c(1:100), runif(100), type="l")
