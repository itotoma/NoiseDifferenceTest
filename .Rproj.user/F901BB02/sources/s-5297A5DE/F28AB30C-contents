library(tidyverse)
library(scran)
library(scDD)
library(BASiCS)
build_sceObj_from_readcount <- function(geno1data, geno2data, geno1, geno2){
  n1 = ncol(geno1data)
  n2 = ncol(geno2data)
  condition <- c(rep(1,n1), rep(2, n2)) %>% 
    as.matrix() %>% t() %>% as.data.frame() %>%  
    data.table::setnames(c(colnames(geno1data), colnames(geno2data))) %>% t()
    #data.table::setnames(c( paste(geno1, c(1:n1), sep=""), paste(geno2, c(1:n2), sep=""))) %>% t()
  wt_targ_counts = cbind(geno1data, geno2data)
  wt_targ_sce <- SingleCellExperiment(assays=list(counts=wt_targ_counts), colData=data.frame(condition))
  return(wt_targ_sce)
}
detect_DD_from_normsceObj <- function(norm_sce){
  prior_param=list(alpha=0.01, mu0=0, s0=0.01, a0=0.01, b0=0.01)
  scDatExSim <- scDD(norm_sce, prior_param=prior_param, testZeroes=TRUE)
  return(scDatExSim)
}
CreateChainObject <- function(FilteredData, RunName, dir){
  Batch <- c(1:length(unique(FilteredData$Replicate))) %>% 
    set_names(unique(FilteredData$Replicate))
  CountRep <- FilteredData %>% select(Replicate) %>% 
    nth(1) %>% sapply(function(x){return(Batch[x])})
  
  FilteredCount = FilteredData %>% select(-Replicate) %>% as.matrix() %>% t()
  SCE <- SingleCellExperiment(assays = list(counts = FilteredCount), 
                              colData = data.frame(BatchInfo = CountRep))
  Regression <- BASiCS_MCMC(Data = SCE, N = 20000, 
                            Thin = 20, Burn = 10000, 
                            Regression = TRUE , 
                            PrintProgress = TRUE,
                            WithSpikes = FALSE,
                            StoreChains = TRUE,
                            StoreDir = dir,
                            RunName = RunName)
}

#raw count data
#raw_count_data <- read.table("../elife-51254-code1/data/103118_SS_Data.tsv", header=T, sep="\t")

#Data loading
##pre-processed data (Doublets and low-count cells have already been removed )
##BASiCS use pre-processed data. For set condition identical, scDD also use this data
processed_count_data <- read.table("../elife-51254-code2.tsv", header=T, sep="\t")
mutant = "stp2"
media = "YPD"
dir = paste(media, "_WTvsSTP2",sep="")
print(dir)
WTMainData <-  processed_count_data %>% 
               filter(Genotype_Group == "WT(ho)") %>% 
               filter(Condition == media)
MutantMainData <- processed_count_data %>% 
                  filter(Genotype_Group == mutant) %>% 
                  filter(Condition == media)

WTCount <- WTMainData %>%
           select(-KANMX, -NATMX, -Genotype, -Genotype_Group, -Replicate, -Condition, -tenXBarcode) %>% t()
MutantCount <- MutantMainData %>% 
             select(-KANMX, -NATMX, -Genotype, -Genotype_Group, -Replicate, -Condition, -tenXBarcode) %>% t()

#Differentially modality test
Sceobj <- build_sceObj_from_readcount(WTCount, MutantCount, "WT(ho)", mutant) 
NormSceobj <- Sceobj %>% preprocess(zero.thresh=0.9, scran_norm=TRUE)
scDDtest <- detect_DD_from_normsceObj(NormSceobj)

#Filtering Differentially modality genes
scDDtestFile <- paste("scDDtest_","WTvs", toupper(mutant), ".csv", sep="")
results(scDDtest) %>% write.csv(file.path(dir,scDDtestFile))
scDDresultData = read.csv(file.path(dir,scDDtestFile))
cat("LOAD", scDDtestFile)
NonModalChangeGenes = scDDresultData %>% filter(DDcategory!="DM") %>% 
                      filter(DDcategory!="DB") %>% nth(1)

#Create BASiCS Chain Object
WTFilteredData = WTMainData[,c(NonModalChangeGenes,'Replicate')]
MutantFilteredData = MutantMainData[,c(NonModalChangeGenes,'Replicate')]
cat("Caution! Please confirm regression file name!!")
CreateChainObject(WTFilteredData, "WTRegression", dir)
CreateChainObject(MutantFilteredData, "STP2Regression", dir)



#Test noise difference
dirlist = processed_count_data$Condition %>% unique() %>% sapply(function(x){paste(x, "_WTvsSTP2", sep="")}) %>% 
  as.array()
MeanList = list()
ResDispList = list()
for(dir in dirlist){
  print(dir)
  WT_Regression <- BASiCS_LoadChain("WTRegression", StoreDir = dir) 
  STP2_Regression <- BASiCS_LoadChain("STP2Regression", StoreDir = dir) 
  TestWTSTP2 <- BASiCS_TestDE(Chain1 = WT_Regression, Chain2 = STP2_Regression,
                GroupLabel1 = "WT", GroupLabel2 = "STP2",
                EpsilonM = log2(1.5), EpsilonD = log2(1.5),
                EFDR_M = 0.10, EFDR_D = 0.10,
                Offset = TRUE, PlotOffset = TRUE, Plot = TRUE)
  ResDisp = as.data.frame(TestWTSTP2, Parameter = "ResDisp", Filter=FALSE)
  ResDispList = c(ResDispList, list(ResDisp))
  Mean = as.data.frame(TestWTSTP2, Parameter = "Mean", Filter=FALSE)
  MeanList = c(MeanList, list(Mean))
}
names(MeanList) = dirlist
names(ResDispList) = dirlist
BASiCS_PlotDE(TestWTSTP2, Parameters = "Mean")

#BAP2 YBR068C
#BAP3 YDR046C
##Start light analysis
Yeastract = read.csv("/Users/itoutouma/Lab_Analysis/GRN/RegulationTwoColumnTable_both.tsv", sep=';', header = FALSE)
yeast_gene_name = read.csv("/Users/itoutouma/Lab_Analysis/GRN/orftogene.txt", sep="\t", header=T)
yeast_gene_name$ORF = apply(yeast_gene_name, MARGIN=1, 
                      function(row){ 
                        if(length(grep("-", row[2]))){ return(gsub("-", "\\.", row[2]))}
                        else{ return(row[2])}
                      })

STP2BindGenes = Yeastract %>% filter(V1 == "STP2") %>% select(V2)
STP2BindGenes %>% left_join(yeast_gene_name, by=c("V2"="Name")) %>% 
  left_join(scDDresultData, by=c("ORF"="gene")) %>% select(DDcategory) %>% nth(1) %>% table()

#Redundant regulated by STP1 and STP2
CResDispSTP2 =  left_join(ResDisp, yeast_gene_name, by=c("GeneName"="ORF")) %>% 
            select(Name, ProbDiffResDisp, ResultDiffResDisp, ResDispDistance) %>% 
            mutate(ProbDiffResDisp = ifelse(ResDispDistance < 0 , -1*ProbDiffResDisp, ProbDiffResDisp))
CResDispSTP2Binds <- CResDispSTP2 %>% filter(is.element(Name,STP2BindGenes$V2))

CMeanSTP2 = left_join(Mean, yeast_gene_name, by=c("GeneName"="ORF")) %>% 
        select(Name, ProbDiffMean, ResultDiffMean, MeanLog2FC) %>% 
        mutate(ProbDiffMean = ifelse(ResultDiffMean < 0, -1*ProbDiffMean, ProbDiffMean))
CMeanSTP2Binds <- CMeanSTP2 %>% filter(is.element(Name,STP2BindGenes$V2))

HeatmapDf <- left_join(CResDispSTP2Binds, CMeanSTP2Binds, by="Name") %>% 
              select(Name, ResDispDistance, MeanLog2FC, ResultDiffMean, ResultDiffResDisp) %>% 
              setNames(c("Gene","noise", "mean", "r1", "r2")) 
 

#gene x TFs
#This data does not suggests stp2 interaction !! 
#Bad for analysis, but good for my study motivation!!
#ChristopherInference = read.csv("/Users/itoutouma/Lab_Analysis/elife-51254-code1/network/signed_network.tsv", sep="\t", header=T)
#BAP2 YBR068C
#BAP3 YDR046C
#STP1 YDR463W
#STP2 YHR006W

test = left_join(ResDisp, yeast_gene_name, by=c("GeneName"="ORF")) %>% 
  select(Name, ProbDiffResDisp, ResultDiffResDisp, ResDispDistance)

